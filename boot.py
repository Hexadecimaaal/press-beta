from machine import SPI, Pin
import time

spi = SPI(0, baudrate=400000, sck=Pin(2), mosi=Pin(3), miso=Pin(4), firstbit=machine.SPI.MSB, polarity=1, phase=1)

spi.read(1)

reset = Pin(0, Pin.OUT, value=0)
cs = Pin(5, Pin.OUT, value=1)
rs = Pin(1, Pin.OUT, value=0)
csrom = Pin(15, Pin.OUT, value=1)

def gb2312_to_address(codepoint):
    msb = codepoint >> 8
    lsb = codepoint % (1 << 8)
    baseadd = 0
    assert lsb >= 0xA1
    if msb == 0xA9:
        return (282 + (lsb - 0xA1)) * 32 + baseadd
    elif msb >= 0xA1 and msb <= 0xA3:
        return ((msb - 0xA1) * 94 + (lsb - 0xA1)) * 32 + baseadd
    elif msb >= 0xB0 and msb <= 0xF7:
        return ((msb - 0xB0) * 94 + (lsb - 0xA1) + 846) * 32 + baseadd

def read_char(addr):
    csrom(0)
    spi.write(bytes((0x0b,)))
    spi.write(bytes((addr >> i*8) & 0xff for i in reversed(range(3))))
    spi.write(bytes((0xaa,)))
    ans = spi.read(32)
    csrom(1)
    return ans

def command(byte):
    cs(0)
    rs(0)
    spi.write(bytes((byte,)))
    cs(1)

def data(byte):
    cs(0)
    rs(1)
    spi.write(bytes((byte,)))
    cs(1)

def lcd_init():
    command(0xe2)
    time.sleep_ms(5)
    command(0x2c)
    time.sleep_ms(5)
    command(0x2e)
    time.sleep_ms(5)
    command(0x2f)
    time.sleep_ms(5)
    command(0x23)
    command(0x81)
    command(0x28)
    command(0xa2)
    command(0xc8)
    command(0xa0)
    command(0x40)
    command(0xaf)

page_cur = 0
col_cur = 0

def goto(page, col):
    command(0xb0 | (page & 0xf))
    command(col & 0xf)
    command(0x10 | (col >> 4))

font = {33: [95], 34: [7, 0, 7], 35: [36, 126, 36, 126, 36], 36: [36, 42, 127, 42, 18], 37: [67, 51, 8, 102, 97], 38: [32, 86, 73, 54, 80], 39: [7], 40: [62, 65, 65], 41: [65, 65, 62], 42: [42, 28, 8, 28, 42], 43: [8, 8, 62, 8, 8], 44: [176, 112], 45: [8, 8, 8, 8, 8], 46: [96, 96], 47: [64, 48, 8, 6, 1], 48: [62, 81, 73, 69, 62], 49: [66, 127, 64], 50: [66, 97, 81, 73, 70], 51: [34, 73, 73, 73, 54], 52: [24, 20, 18, 127, 16], 53: [39, 69, 69, 69, 57], 54: [60, 74, 73, 73, 48], 55: [1, 113, 9, 5, 3], 56: [54, 73, 73, 73, 54], 57: [6, 73, 73, 41, 30], 58: [54, 54], 59: [182, 118], 60: [8, 20, 20, 34, 34], 61: [20, 20, 20, 20, 20], 62: [34, 34, 20, 20, 8], 63: [2, 1, 81, 9, 6], 64: [62, 65, 93, 85, 93, 81, 30], 65: [126, 9, 9, 9, 126], 66: [127, 73, 73, 73, 54], 67: [62, 65, 65, 65, 34], 68: [127, 65, 65, 65, 62], 69: [127, 73, 73, 73, 73], 70: [127, 9, 9, 9, 1], 71: [62, 65, 65, 73, 58], 72: [127, 8, 8, 8, 127], 73: [65, 127, 65], 74: [32, 64, 65, 63], 75: [127, 8, 20, 34, 65], 76: [127, 64, 64, 64, 64], 77: [127, 2, 4, 8, 4, 2, 127], 78: [127, 4, 8, 16, 127], 79: [62, 65, 65, 65, 62], 80: [127, 9, 9, 9, 6], 81: [62, 65, 81, 33, 94], 82: [127, 9, 25, 41, 70], 83: [38, 73, 73, 73, 50], 84: [1, 1, 127, 1, 1], 85: [63, 64, 64, 64, 63], 86: [31, 32, 64, 32, 31], 87: [63, 64, 64, 63, 64, 64, 63], 88: [99, 20, 8, 20, 99], 89: [3, 4, 120, 4, 3], 90: [97, 81, 73, 69, 67], 91: [127, 65, 65], 92: [1, 6, 8, 48, 64], 93: [65, 65, 127], 94: [4, 2, 127, 2, 4], 95: [64, 64, 64, 64, 64], 96: [1, 2], 97: [32, 84, 84, 84, 120], 98: [127, 68, 68, 68, 56], 99: [56, 68, 68, 68, 40], 100: [56, 68, 68, 68, 127], 101: [56, 84, 84, 84, 24], 102: [8, 126, 9, 2], 103: [24, 164, 164, 164, 124], 104: [127, 4, 4, 4, 120], 105: [4, 61, 64, 64], 106: [64, 132, 125], 107: [127, 16, 40, 68], 108: [1, 63, 64, 64], 109: [124, 4, 4, 120, 4, 4, 120], 110: [124, 8, 4, 4, 120], 111: [56, 68, 68, 68, 56], 112: [252, 36, 36, 36, 24], 113: [24, 36, 36, 36, 252], 114: [124, 8, 4, 4, 4], 115: [72, 84, 84, 84, 36], 116: [4, 63, 68, 64], 117: [60, 64, 64, 64, 124], 118: [28, 32, 64, 32, 28], 119: [60, 64, 48, 64, 60], 120: [68, 40, 16, 40, 68], 121: [28, 160, 160, 160, 124], 122: [68, 100, 84, 76, 68], 123: [8, 54, 65, 65], 124: [127], 125: [65, 65, 54, 8], 126: [8, 4, 8, 16, 8], 171: [8, 20, 42, 20, 34], 181: [252, 64, 64, 64, 60, 64], 187: [34, 20, 42, 20, 8], 923: [112, 12, 3, 12, 112], 955: [96, 25, 6, 24, 96], 969: [56, 68, 64, 32, 64, 68, 56], 9642: [28, 28, 28], 10122: [62, 127, 91, 65, 95, 127, 62], 10123: [62, 127, 89, 77, 81, 127, 62], 10124: [62, 127, 85, 85, 65, 127, 62], 10125: [62, 127, 103, 107, 65, 127, 62], 10126: [62, 127, 81, 85, 69, 127, 62], 10127: [62, 127, 99, 85, 103, 127, 62], 10128: [62, 127, 77, 117, 121, 127, 62], 10129: [62, 127, 65, 85, 65, 127, 62], 10130: [62, 127, 81, 85, 97, 127, 62], 10131: [62, 65, 127, 65, 93, 65, 62], 11044: [62, 127, 127, 127, 127, 127, 62], 55356: [62, 127, 65, 93, 65, 127, 62]}

def disp(char_data):
    global col_cur, page_cur
    if col_cur + len(char_data) > 128:
        col_cur = 0
        page_cur = page_cur + 1
    goto(page_cur, col_cur)
    for byte in char_data:
        data(byte)
    data(0)
    col_cur = col_cur + len(char_data) + 1
    
# def disp_char(d):
#     global col_cur, page_cur
#     length = int(len(d) / 2)
#     if col_cur + length > 128:
#         col_cur = 0
#         page_cur = page_cur + 1
#     goto(page_cur * 2, col_cur)
#     for byte in d[:length]:
#         data(byte)
#     goto(page_cur * 2 + 1, col_cur)
#     for byte in d[length:]:
#         data(byte)
#     col_cur = col_cur + length
